From 7f7a3d65541828d9889bfdec799bc23339e8e520 Mon Sep 17 00:00:00 2001
From: YongZhuIntel <yong.zhu@intel.com>
Date: Wed, 21 May 2025 09:37:06 +0800
Subject: [PATCH] oneccl align global V0.1.1

base on public branch release/ccl_2021.15.3-arc(def870543749186b6f38cdc865b44d52174c7492)

Build:
       1. mkdir build; cd build
       2. source /opt/intel/oneapi/setvars.sh
       3. export IGC_VISAOptions=-activeThreadsOnlyBarrier
       4. cmake .. -DCMAKE_INSTALL_PREFIX=_install -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx -DCOMPUTE_BACKEND=dpcpp -DCCL_ENABLE_ARCB=1 && make -j && make install

print bandwidth in benchmark
---
 examples/benchmark/include/benchmark.hpp | 40 +++++++++++++++++++++---
 examples/benchmark/src/benchmark.cpp     |  7 +++--
 2 files changed, 41 insertions(+), 6 deletions(-)

diff --git a/examples/benchmark/include/benchmark.hpp b/examples/benchmark/include/benchmark.hpp
index 08a3625..bff6275 100644
--- a/examples/benchmark/include/benchmark.hpp
+++ b/examples/benchmark/include/benchmark.hpp
@@ -377,7 +377,9 @@ void store_to_csv(const user_options_t& options,
                   double max_time,
                   double avg_time,
                   double stddev,
-                  double wait_avg_time) {
+                  double wait_avg_time,
+		  double algbw,
+		  double busbw) {
     std::ofstream csvf;
     csvf.open(options.csv_filepath, std::ofstream::out | std::ofstream::app);
 
@@ -396,7 +398,7 @@ void store_to_csv(const user_options_t& options,
                  << "," << ccl::get_datatype_size(dtype) << "," << elem_count << ","
                  << ccl::get_datatype_size(dtype) * elem_count << "," << buf_count << ","
                  << iter_count << "," << min_time << "," << max_time << "," << avg_time << ","
-                 << stddev << "," << wait_avg_time << std::endl;
+                 << stddev << "," << wait_avg_time << "," << algbw << "," << busbw << std::endl;
         }
         csvf.close();
     }
@@ -472,13 +474,41 @@ void print_timings(const ccl::communicator& comm,
         max_time /= iter_count;
 
         size_t bytes = elem_count * ccl::get_datatype_size(dtype) * buf_count;
+
+        double algbw = bytes*1000/total_avg_time/1024/1024;
+
+         if (ncolls == 1) {
+             if (options.coll_names.front() == "allgather" ||
+                 options.coll_names.front() == "allgatherv" ||
+                 options.coll_names.front() == "reducescatter" ||
+                 options.coll_names.front() == "alltoall" ||
+                 options.coll_names.front() == "alltoallv") {
+                 algbw = algbw * nranks;
+            }
+         }
+
+        double busbw = algbw;
+        if (ncolls == 1) {
+            if (options.coll_names.front() == "allreduce") {
+                busbw = algbw * 2 * (nranks -1) / nranks;
+            } else if (options.coll_names.front() == "allgather" ||
+                options.coll_names.front() == "allgatherv" ||
+                options.coll_names.front() == "reducescatter" ||
+                options.coll_names.front() == "alltoall" ||
+                options.coll_names.front() == "alltoallv") {
+                busbw = algbw * (nranks -1) / nranks;
+           }
+        }
+
         std::stringstream ss;
         ss << std::right << std::fixed << std::setw(COL_WIDTH) << bytes << std::setw(COL_WIDTH)
            << elem_count * buf_count << std::setw(COL_WIDTH) << iter_count << std::setw(COL_WIDTH)
            << std::setprecision(COL_PRECISION) << min_time << std::setw(COL_WIDTH)
            << std::setprecision(COL_PRECISION) << max_time << std::setw(COL_WIDTH)
            << std::setprecision(COL_PRECISION) << total_avg_time << std::setw(COL_WIDTH - 3)
-           << std::setprecision(COL_PRECISION) << stddev << std::setw(COL_WIDTH + 3);
+           << std::setprecision(COL_PRECISION) << stddev << std::setw(COL_WIDTH)
+	   << std::setprecision(COL_PRECISION) << algbw << std::setw(COL_WIDTH)
+	   << std::setprecision(COL_PRECISION) << busbw << std::setw(COL_WIDTH + 3);
 
         if (show_extened_info(options.show_additional_info)) {
             ss << std::right << std::fixed << std::setprecision(COL_PRECISION) << wait_avg_time;
@@ -497,7 +527,9 @@ void print_timings(const ccl::communicator& comm,
                          max_time,
                          total_avg_time,
                          stddev,
-                         wait_avg_time);
+                         wait_avg_time,
+			 algbw,
+			 busbw);
         }
     }
 
diff --git a/examples/benchmark/src/benchmark.cpp b/examples/benchmark/src/benchmark.cpp
index d90fb9b..78957f2 100644
--- a/examples/benchmark/src/benchmark.cpp
+++ b/examples/benchmark/src/benchmark.cpp
@@ -105,7 +105,8 @@ void run(ccl::communicator& service_comm,
                    << "#elem_count" << std::setw(COL_WIDTH) << "#repetitions"
                    << std::setw(COL_WIDTH) << "t_min[usec]" << std::setw(COL_WIDTH) << "t_max[usec]"
                    << std::setw(COL_WIDTH) << "t_avg[usec]" << std::setw(COL_WIDTH - 3)
-                   << "stddev[%]";
+                   << "stddev[%]" << std::setw(COL_WIDTH) << "algbw[GB/s]" << std::setw(COL_WIDTH)
+		   << "busbw[GB/s]";
 
                 if (show_extened_info(options.show_additional_info)) {
                     ss << std::right << std::setw(COL_WIDTH + 3) << "wait_t_avg[usec]";
@@ -435,7 +436,9 @@ int main(int argc, char* argv[]) {
              << "t_max[usec],"
              << "t_avg[usec],"
              << "stddev[%],"
-             << "wait_t_avg[usec]" << std::endl;
+             << "wait_t_avg[usec],"
+             << "algbw[GB/s],"
+             << "busbw[GB/s]" << std::endl;
         csvf.close();
     }
 
-- 
2.25.1

